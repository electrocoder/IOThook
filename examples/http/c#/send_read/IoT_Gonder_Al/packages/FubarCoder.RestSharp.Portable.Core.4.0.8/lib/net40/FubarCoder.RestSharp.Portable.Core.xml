<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FubarCoder.RestSharp.Portable.Core</name>
    </assembly>
    <members>
        <member name="T:RestSharp.Portable.AuthenticationChallengeHandler">
            <summary>
            The authentication manager that bundles authentication mechanisms that may be requested by the Www-Authenticate or Proxy-Authenticate headers.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.#ctor(RestSharp.Portable.AuthHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.AuthenticationChallengeHandler" /> class.
            </summary>
            <param name="authHeader">The HTTP header to look for the challenge.</param>
        </member>
        <member name="P:RestSharp.Portable.AuthenticationChallengeHandler.Authenticators">
            <summary>
            Gets the current list auf registered authenticators.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.AuthenticationChallengeHandler.Header">
            <summary>
            Gets a value that specifies the HTTP header to look for when trying to find the authentication mechanism.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.Register(System.String,RestSharp.Portable.IAuthenticator,System.Int32)">
            <summary>
            Registers a new authentication module
            </summary>
            <param name="method">The method ID used in the Www-Authenticate header.</param>
            <param name="authenticator">The authenticator to assign with the method ID.</param>
            <param name="securityLevel">Authenticators with higher security levels are preferred.</param>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.Unregister(System.String)">
            <summary>
            Removes an authentication module with the given method ID.
            </summary>
            <param name="method">The method ID used in the Www-Authenticate header.</param>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.CanPreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IRestRequest" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.CanPreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IHttpRequestMessage" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.PreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.PreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The REST client the response is assigned to</param>
            <param name="request">The REST request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthenticationChallengeHandler.HandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Will be called when the authentication failed
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <param name="response">Response of the failed request</param>
            <returns>Task where the handler for a failed authentication gets executed</returns>
        </member>
        <member name="T:RestSharp.Portable.AuthHeader">
            <summary>
            The authentication/authorization header to use
            </summary>
        </member>
        <member name="F:RestSharp.Portable.AuthHeader.Www">
            <summary>
            Authentication/authorization header for web sites
            </summary>
        </member>
        <member name="F:RestSharp.Portable.AuthHeader.Proxy">
            <summary>
            Authentication/authorization header for proxies
            </summary>
        </member>
        <member name="T:RestSharp.Portable.AuthHeaderInfo">
            <summary>
            Authentication/authorization header information
            </summary>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderInfo.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.AuthHeaderInfo" /> class.
            </summary>
            <param name="name">The authentication method name</param>
            <param name="rawValue">The raw authentication method values</param>
            <param name="values">The parsed authentication method values</param>
            <param name="rawValues">The raw parsed authentication method values</param>
        </member>
        <member name="P:RestSharp.Portable.AuthHeaderInfo.Name">
            <summary>
            Gets the authorization/authentication method name
            </summary>
        </member>
        <member name="P:RestSharp.Portable.AuthHeaderInfo.RawValue">
            <summary>
            Gets the authorization/authentication method information
            </summary>
        </member>
        <member name="P:RestSharp.Portable.AuthHeaderInfo.Values">
            <summary>
            Gets the parsed authorization/authentication method information
            </summary>
        </member>
        <member name="P:RestSharp.Portable.AuthHeaderInfo.RawValues">
            <summary>
            Gets the raw parsed authorization/authentication method information
            </summary>
        </member>
        <member name="T:RestSharp.Portable.AuthHeaderUtilities">
            <summary>
            Utilities for the authorization header management
            </summary>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetRequestUri(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage)">
            <summary>
            Get the absolute request URL
            </summary>
            <param name="client">HTTP client</param>
            <param name="request">HTTP request message</param>
            <returns>The absolute URI</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetRequestUri(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Get the absolute response or request URL
            </summary>
            <param name="client">HTTP client</param>
            <param name="request">HTTP request message</param>
            <param name="response">HTTP response message</param>
            <returns>The absolute URI</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.ToAuthorizationHeaderName(RestSharp.Portable.AuthHeader)">
            <summary>
            Returns the HTTP header name for a given authorization header
            </summary>
            <param name="header">The authorization/authentication header</param>
            <returns>The HTTP header name</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.ToAuthenticationHeaderName(RestSharp.Portable.AuthHeader)">
            <summary>
            Returns the HTTP header name for a given authentication header
            </summary>
            <param name="header">The authorization/authentication header</param>
            <returns>The HTTP header name</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.RemoveAuthorizationHeader(RestSharp.Portable.IParameterCollection,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Remove the authorization HTTP header if it's not equal to the old one.
            </summary>
            <param name="parameters">List of HTTP headers</param>
            <param name="header">The type of the HTTP header that stores the authorization information</param>
            <param name="authValue">The authorization header value</param>
            <returns>true = header removed, false = same header already exists, null = header not found</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.RemoveAuthorizationHeader(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Remove the authorization header from both the client and the request
            </summary>
            <param name="client">The client to be searched for the HTTP authorization header</param>
            <param name="request">The request to be searched for the HTTP authorization header</param>
            <param name="header">The type of the HTTP header that stores the authorization information</param>
            <param name="authValue">The authorization header value</param>
            <returns>true when the authorization header can be added again</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.SetAuthorizationHeader(RestSharp.Portable.IRestRequest,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Unconditionally adds the authorization header to the request
            </summary>
            <param name="request">The request to add the authorization header to</param>
            <param name="header">The type of the HTTP header that stores the authorization information</param>
            <param name="authValue">The authorization header value</param>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.SetAuthorizationHeader(RestSharp.Portable.IHttpRequestMessage,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Unconditionally adds the authorization header to the request
            </summary>
            <param name="request">The request to add the authorization header to</param>
            <param name="header">The type of the HTTP header that stores the authorization information</param>
            <param name="authValue">The authentication header value</param>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.TrySetAuthorizationHeader(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Try to set the authorization header
            </summary>
            <param name="client">The client to remove the old authorization header from</param>
            <param name="request">The request to remove the old authorization header from and to add the new header to</param>
            <param name="header">The type of the HTTP header that stores the authorization information</param>
            <param name="authValue">The authorization header value</param>
            <returns>true when the authorization header could be set</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetAuthenticationHeaderInfo(RestSharp.Portable.IRestResponse,RestSharp.Portable.AuthHeader)">
            <summary>
            Get all authentication header information
            </summary>
            <param name="response">The response to get the authentication header from</param>
            <param name="header">The header to query (WWW or proxy)</param>
            <returns>All authentication header information items</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetAuthenticationMethodValue(RestSharp.Portable.IRestResponse,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Try to get the authentication header value for a given authentication method
            </summary>
            <param name="response">The response to get the authentication header from</param>
            <param name="header">The header to query (WWW or proxy)</param>
            <param name="methodName">The method name to query the value for</param>
            <returns>The information attached to the authentication header for a given method</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetAuthenticationHeaderInfo(RestSharp.Portable.IHttpResponseMessage,RestSharp.Portable.AuthHeader)">
            <summary>
            Get all authentication header information
            </summary>
            <param name="response">The response to get the authentication header from</param>
            <param name="header">The header to query (WWW or proxy)</param>
            <returns>All authentication header information items</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.GetAuthenticationMethodValue(RestSharp.Portable.IHttpResponseMessage,RestSharp.Portable.AuthHeader,System.String)">
            <summary>
            Try to get the authentication header value for a given authentication method
            </summary>
            <param name="response">The response to get the authentication header from</param>
            <param name="header">The header to query (WWW or proxy)</param>
            <param name="methodName">The method name to query the value for</param>
            <returns>The information attached to the authentication header for a given method</returns>
        </member>
        <member name="M:RestSharp.Portable.AuthHeaderUtilities.ParseAuthenticationHeader(System.String)">
            <summary>
            Parse a string and extract all <see cref="T:RestSharp.Portable.AuthHeaderInfo"/> entries.
            </summary>
            <param name="headerValue">The string to parse</param>
            <returns>An enumeration of <see cref="T:RestSharp.Portable.AuthHeaderInfo"/> elements</returns>
        </member>
        <member name="T:RestSharp.Portable.ContentCollectionMode">
            <summary>
            Controls if basic content or multi part content is used
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ContentCollectionMode.BasicContent">
            <summary>
            Basic content only (ignores file parameters)
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ContentCollectionMode.MultiPartForFileParameters">
            <summary>
            MultiPart only if file parameters are used
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ContentCollectionMode.MultiPart">
            <summary>
            Always use multi part content
            </summary>
        </member>
        <member name="T:RestSharp.Portable.FileParameter">
            <summary>
            Container for files to be uploaded with requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.FileParameter.ContentLength">
            <summary>
            Gets or sets the length of data to be sent
            </summary>
        </member>
        <member name="P:RestSharp.Portable.FileParameter.FileName">
            <summary>
            Gets or sets the name of the file to use when uploading
            </summary>
        </member>
        <member name="M:RestSharp.Portable.FileParameter.Create(System.String,System.Byte[],System.String,System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="data">The data to use as the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <param name="contentType">The content type to use in the request.</param>
            <returns>The <see cref="T:RestSharp.Portable.FileParameter"/></returns>
        </member>
        <member name="M:RestSharp.Portable.FileParameter.Create(System.String,System.Byte[],System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="data">The data to use as the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <returns>The <see cref="T:RestSharp.Portable.FileParameter"/> using the default content type.</returns>
        </member>
        <member name="M:RestSharp.Portable.FileParameter.Create(System.String,System.IO.Stream,System.String,System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="input">The input stream for the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <param name="contentType">The content type to use in the request.</param>
            <returns>The <see cref="T:RestSharp.Portable.FileParameter"/></returns>
        </member>
        <member name="M:RestSharp.Portable.FileParameter.Create(System.String,System.IO.Stream,System.String)">
            <summary>
             Creates a file parameter from an array of bytes.
            </summary>
            <param name="name">The parameter name to use in the request.</param>
            <param name="input">The input stream for the file's contents.</param>
            <param name="filename">The filename to use in the request.</param>
            <returns>The <see cref="T:RestSharp.Portable.FileParameter"/> using the default content type.</returns>
        </member>
        <member name="T:RestSharp.Portable.HttpContentExtensions">
            <summary>
            Extension methods for <see cref="T:RestSharp.Portable.IHttpContent"/>.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.HttpContentExtensions.LoadIntoBufferAsync(RestSharp.Portable.IHttpContent)">
            <summary>
            Loads the data into a buffer with a maximum size of <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="content">The content to load the data from</param>
            <returns>The task that loads the content</returns>
        </member>
        <member name="M:RestSharp.Portable.HttpContentExtensions.GetEncoding(RestSharp.Portable.IHttpContent,RestSharp.Portable.IRestClient)">
            <summary>
            Tries to get the encoding handler for compressed responses
            </summary>
            <param name="content">The content to decode</param>
            <param name="restClient">The REST client containing the encoding handlers</param>
            <returns>The found encoding</returns>
        </member>
        <member name="T:RestSharp.Portable.HttpHeadersExtensions">
            <summary>
            Extension methods for <see cref="T:RestSharp.Portable.IHttpHeaders"/>.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.HttpHeadersExtensions.GetValue(RestSharp.Portable.IHttpHeaders,System.String)">
            <summary>
            Gets the HTTP header value or null
            </summary>
            <param name="headers">The headers to get the value from</param>
            <param name="name">The header name to get the value for</param>
            <returns>The first HTTP header value or null</returns>
        </member>
        <member name="M:RestSharp.Portable.HttpHeadersExtensions.GetValue(RestSharp.Portable.IHttpHeaders,System.String,System.String)">
            <summary>
            Gets the HTTP header value or the given <paramref name="defaultValue"/>.
            </summary>
            <param name="headers">The headers to get the value from</param>
            <param name="name">The header name to get the value for</param>
            <param name="defaultValue">The default value when the header value couldn't be found in the headers.</param>
            <returns>The first HTTP header value or the given <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="T:RestSharp.Portable.IAuthenticator">
            <summary>
            The base authenticator interface.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.CanPreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IRestRequest" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.CanPreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IHttpRequestMessage" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The HTTP client the response is assigned to</param>
            <param name="request">The HTTP request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.PreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.PreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.IAuthenticator.HandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Will be called when the authentication failed
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <param name="response">Response of the failed request</param>
            <returns>Task where the handler for a failed authentication gets executed</returns>
        </member>
        <member name="T:RestSharp.Portable.IDeserializer">
            <summary>
            Deserialize for a content type
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IDeserializer.Deserialize``1(RestSharp.Portable.IRestResponse)">
            <summary>
            Deserialize the response
            </summary>
            <typeparam name="T">Object type to deserialize the result to</typeparam>
            <param name="response">The response to deserialize the result from</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:RestSharp.Portable.IEncoding">
            <summary>
            Content encoding handler interface
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IEncoding.Decode(System.Byte[])">
            <summary>
            Decode the content
            </summary>
            <param name="data">Content to decode</param>
            <returns>Decoded content</returns>
        </member>
        <member name="M:RestSharp.Portable.IEncoding.DecodeStream(System.IO.Stream)">
            <summary>
            Decode the response stream
            </summary>
            <param name="data">Response stream to decode</param>
            <returns>Stream returning the decoded data</returns>
        </member>
        <member name="T:RestSharp.Portable.IHttpClient">
            <summary>
            Interface that's an abstraction from the default HttpClient provided by the .NET framework
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpClient.BaseAddress">
            <summary>
            Gets or sets the base address of the HTTP client
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpClient.DefaultRequestHeaders">
            <summary>
            Gets the default request headers
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpClient.Timeout">
            <summary>
            Gets or sets the timeout
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IHttpClient.SendAsync(RestSharp.Portable.IHttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a request
            </summary>
            <param name="request">The request do send</param>
            <param name="cancellationToken">The cancellation token used to signal an abortion</param>
            <returns>The task to query the response</returns>
        </member>
        <member name="T:RestSharp.Portable.IHttpClientFactory">
            <summary>
            Interface to allow custom creation of HttpClient and HttpRequestMessage objects
            </summary>
            <remarks>
            The DefaultHttpClientFactory contains some helpful protected methods that helps gathering
            the data required for a proper configuration of the HttpClient.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.IHttpClientFactory.CreateClient(RestSharp.Portable.IRestClient)">
            <summary>
            Create the client
            </summary>
            <param name="client">The REST client that wants to create the HTTP client</param>
            <returns>A new HttpClient object</returns>
            <remarks>
            The DefaultHttpClientFactory contains some helpful protected methods that helps gathering
            the data required for a proper configuration of the HttpClient.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.IHttpClientFactory.CreateRequestMessage(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Collections.Generic.IList{RestSharp.Portable.Parameter})">
            <summary>
            Create the request message
            </summary>
            <param name="client">The REST client that wants to create the HTTP request message</param>
            <param name="request">The REST request for which the HTTP request message is created</param>
            <param name="parameters">The parameters for the REST request (read-only)</param>
            <returns>A new HttpRequestMessage object</returns>
            <remarks>
            The DefaultHttpClientFactory contains some helpful protected methods that helps gathering
            the data required for a proper configuration of the HttpClient.
            </remarks>
        </member>
        <member name="T:RestSharp.Portable.IHttpContent">
            <summary>
            Abstraction of HTTP content used to write a request or read from a (buffered) response or buffered request.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.true if <paramref name="length"/> is a valid length; otherwise, false.
            </returns>
            <param name="length">The length in bytes of the HTTP content.</param>
        </member>
        <member name="T:RestSharp.Portable.IHttpHeaders">
            <summary>
            A generic interface to the HTTP headers
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header values
            </summary>
            <param name="name">The header to add the values for</param>
            <param name="values">The values to add</param>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.Add(System.String,System.String)">
            <summary>
            Add a header value
            </summary>
            <param name="name">The header to add the value for</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.Clear">
            <summary>
            Remove all headers
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.Contains(System.String)">
            <summary>
            Is there a value for a header?
            </summary>
            <param name="name">The name of the header</param>
            <returns>true, if there is at least one value for the header</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.GetValues(System.String)">
            <summary>
            Returns all values for a given header
            </summary>
            <remarks>
            Throws an exception if the header doesn't exist.
            </remarks>
            <param name="name">The header name</param>
            <returns>The sequence of header values</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.Remove(System.String)">
            <summary>
            Remove the header with the given name
            </summary>
            <param name="name">The header name</param>
            <returns>true, if the header could be removed</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Try to get the values
            </summary>
            <param name="name">The header name</param>
            <param name="values">The values of the header to return</param>
            <returns>true, if the HTTP header was found</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Try to add header values without validation
            </summary>
            <param name="name">The header name</param>
            <param name="values">The values to add</param>
            <returns>true, if the HTTP header values could be added</returns>
        </member>
        <member name="M:RestSharp.Portable.IHttpHeaders.TryAddWithoutValidation(System.String,System.String)">
            <summary>
            Try to add a header value without validation
            </summary>
            <param name="name">The header name</param>
            <param name="value">The value to add</param>
            <returns>true, if the HTTP header value could be added</returns>
        </member>
        <member name="T:RestSharp.Portable.IHttpRequestMessage">
            <summary>
            Interface to a request message
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpRequestMessage.Headers">
            <summary>
            Gets the HTTP headers for the request message
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpRequestMessage.Method">
            <summary>
            Gets or sets the HTTP request method
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpRequestMessage.RequestUri">
            <summary>
            Gets or sets the request URI
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpRequestMessage.Version">
            <summary>
            Gets or sets the HTTP protocol version
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpRequestMessage.Content">
            <summary>
            Gets or sets the content of the request message
            </summary>
        </member>
        <member name="T:RestSharp.Portable.IHttpResponseMessage">
            <summary>
            The HTTP response message
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.Cookies">
            <summary>
            Gets the cookie container to query the cookies from
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.Headers">
            <summary>
            Gets the HTTP headers returned by the response
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the request was successful
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.ReasonPhrase">
            <summary>
            Gets the reason phrase returned together with the status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.RequestMessage">
            <summary>
            Gets the request message this response was returned for
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.StatusCode">
            <summary>
            Gets the status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IHttpResponseMessage.Content">
            <summary>
            Gets the content of the response
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IHttpResponseMessage.EnsureSuccessStatusCode">
            <summary>
            Throws an exception when the status doesn't indicate success.
            </summary>
        </member>
        <member name="T:RestSharp.Portable.IParameterCollection">
            <summary>
            Collection of parameters
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IParameterCollection.AddOrUpdate(RestSharp.Portable.Parameter)">
            <summary>
            Add or update parameter
            </summary>
            <param name="parameter">The parameter to add or update</param>
            <remarks>
            This ensures that the parameter with a given name and type exists only once.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.IParameterCollection.Remove(RestSharp.Portable.ParameterType,System.String)">
            <summary>
            Removes all parameters with the given type and name.
            </summary>
            <param name="type">The parameter type</param>
            <param name="name">The parameter name</param>
            <returns><code>true</code> when at least one parameter could be removed</returns>
        </member>
        <member name="M:RestSharp.Portable.IParameterCollection.Find(RestSharp.Portable.ParameterType,System.String)">
            <summary>
            Finds all parameters with the given type and name.
            </summary>
            <param name="type">The parameter type</param>
            <param name="name">The parameter name</param>
            <returns>The list of found parameters</returns>
        </member>
        <member name="T:RestSharp.Portable.IRestClient">
            <summary>
            REST client
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.Authenticator">
            <summary>
            Gets or sets the authenticator to use for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.BaseUrl">
            <summary>
            Gets or sets the base URL for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.DefaultParameters">
            <summary>
            Gets the default parameters for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.CookieContainer">
            <summary>
            Gets or sets the cookies for all requests
            </summary>
            <remarks>
            Cookies set by the server will be collected here.
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.Proxy">
            <summary>
            Gets or sets a proxy to use for the requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.Credentials">
            <summary>
            Gets or sets the credentials used for the request (e.g. NTLM authentication)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.IgnoreResponseStatusCode">
            <summary>
            Gets or sets a value indicating whether the response status code should be ignored?
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.Timeout">
            <summary>
            Gets or sets the timeout to be used for requests.
            </summary>
            <remarks>
            When the value isn't set, it uses the default timeout of the underlying HTTP client (100 seconds) or whatever
            is used to execute the HTTP requests.
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.UserAgent">
            <summary>
            Gets or sets the user agent for the REST client
            </summary>
            <remarks>
            The default value is "RestSharp/{version}"
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.ContentHandlers">
            <summary>
            Gets the dictionary that maps the content type to its handler
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestClient.EncodingHandlers">
            <summary>
            Gets the dictionary that maps the encoding to its handler
            </summary>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.Execute(RestSharp.Portable.IRestRequest)">
            <summary>
            Execute the given request
            </summary>
            <param name="request">Request to execute</param>
            <returns>Response returned</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.Execute``1(RestSharp.Portable.IRestRequest)">
            <summary>
            Execute the given request
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="request">Request to execute</param>
            <returns>Response returned, with a deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.Execute(RestSharp.Portable.IRestRequest,System.Threading.CancellationToken)">
            <summary>
            Cancellable request execution
            </summary>
            <param name="request">Request to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>Response returned</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.Execute``1(RestSharp.Portable.IRestRequest,System.Threading.CancellationToken)">
            <summary>
            Cancellable request execution
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="request">Request to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>Response returned, with a deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.GetHandler(System.String)">
            <summary>
            Get a previously added content type handler
            </summary>
            <param name="contentType">The Accept header value that identifies the handler</param>
            <returns>The deserializer that can handle the given content type.</returns>
            <remarks>
            This function returns NULL if the handler for the given content type cannot be found.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.GetEncoding(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get a previously added content encoding handler
            </summary>
            <param name="encodingIds">The Accept-Encoding header value that identifies the handler</param>
            <returns>The handler that can decode the given content encoding.</returns>
            <remarks>
            This function returns NULL if the handler for the given content encoding cannot be found.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.AddHandler(System.String,RestSharp.Portable.IDeserializer)">
            <summary>
            Add a new content type handler
            </summary>
            <param name="contentType">The Accept header value</param>
            <param name="deserializer">The deserializer to decode the content</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.RemoveHandler(System.String)">
            <summary>
            Remove a previously added content type handler
            </summary>
            <param name="contentType">The Accept header value that identifies the handler</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.ClearHandlers">
            <summary>
            Remove all previously added content type handlers
            </summary>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.AddEncoding(System.String,RestSharp.Portable.IEncoding)">
            <summary>
            Add a new content encoding handler
            </summary>
            <param name="encodingId">The Accept-Encoding header value</param>
            <param name="encoding">The encoding engine to decode the content</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.RemoveEncoding(System.String)">
            <summary>
            Remove a previously added content encoding handler
            </summary>
            <param name="encodingId">The Accept-Encoding header value that identifies the handler</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.IRestClient.ClearEncodings">
            <summary>
            Remove all previously added content encoding handlers
            </summary>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="T:RestSharp.Portable.IRestRequest">
            <summary>
            Defines a REST request
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.Serializer">
            <summary>
            Gets or sets the serializer that should serialize the body
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.Method">
            <summary>
            Gets or sets the HTTP request method (GET, POST, etc...)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.Resource">
            <summary>
            Gets the resource relative to the REST clients base URL
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.Parameters">
            <summary>
            Gets the REST request parameters
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.ContentCollectionMode">
            <summary>
            Gets or sets the content collection mode which controls if we use basic content or multi part content by default.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestRequest.ResponseWriterAsync">
            <summary>
            Gets or sets the method to use to write the response instead of reading into RawBytes
            </summary>
        </member>
        <member name="T:RestSharp.Portable.IRestResponse">
            <summary>
            The generic REST response
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.Request">
            <summary>
            Gets the Request that resulted in this response
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.ResponseUri">
            <summary>
            Gets the full response URL
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.RawBytes">
            <summary>
            Gets the raw data
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.ContentType">
            <summary>
            Gets the content type of the raw data
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.Cookies">
            <summary>
            Gets the collection of cookies
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.Headers">
            <summary>
            Gets the response headers (without content headers)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.IsSuccess">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.StatusCode">
            <summary>
            Gets the HTTP status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.StatusDescription">
            <summary>
            Gets the description for the HTTP status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse.Content">
            <summary>
            Gets the string representation of response content
            </summary>
        </member>
        <member name="T:RestSharp.Portable.IRestResponse`1">
            <summary>
            Typed response
            </summary>
            <typeparam name="T">
            Type of the object to deserialize from the raw data
            </typeparam>
        </member>
        <member name="P:RestSharp.Portable.IRestResponse`1.Data">
            <summary>
            Gets the deserialized object of type T
            </summary>
        </member>
        <member name="T:RestSharp.Portable.ISerializer">
            <summary>
            Serializer for a content type
            </summary>
        </member>
        <member name="P:RestSharp.Portable.ISerializer.ContentType">
            <summary>
            Gets or sets the content type produced by the serializer
            </summary>
        </member>
        <member name="M:RestSharp.Portable.ISerializer.Serialize(System.Object)">
            <summary>
            Serialize the object into a byte array
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>Byte array to send in the request body</returns>
        </member>
        <member name="T:RestSharp.Portable.Method">
            <summary>
            HTTP method to use when making requests
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.GET">
            <summary>
            GET request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.POST">
            <summary>
            POST request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.PUT">
            <summary>
            PUT request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.DELETE">
            <summary>
            DELETE request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.HEAD">
            <summary>
            HEAD request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.OPTIONS">
            <summary>
            OPTIONS request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.PATCH">
            <summary>
            PATCH request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Method.MERGE">
            <summary>
            MERGE request
            </summary>
        </member>
        <member name="T:RestSharp.Portable.MultiValueDictionary`2">
            <summary>
            A MultiValueDictionary can be viewed as a <see cref="T:System.Collections.IDictionary" /> that allows multiple 
            values for any given unique key. While the MultiValueDictionary API is 
            mostly the same as that of a regular <see cref="T:System.Collections.IDictionary" />, there is a distinction
            in that getting the value for a key returns a <see cref="T:RestSharp.Portable.IReadOnlyCollection`1" /> of values
            rather than a single value associated with that key. Additionally, 
            there is functionality to allow adding or removing more than a single
            value at once. 
            
            The MultiValueDictionary can also be viewed as a IReadOnlyDictionary&lt;TKey,IReadOnlyCollection&lt;TValue&gt;t&gt;
            where the <see cref="T:RestSharp.Portable.IReadOnlyCollection`1" /> is abstracted from the view of the programmer.
            
            For a read-only MultiValueDictionary, see <see cref="T:System.Linq.ILookup`2" />.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:RestSharp.Portable.MultiValueDictionary`2._dictionary">
            <summary>
            The private dictionary that this class effectively wraps around
            </summary>
        </member>
        <member name="F:RestSharp.Portable.MultiValueDictionary`2._newCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:RestSharp.Portable.MultiValueDictionary`2._version">
            <summary>
            The current version of this MultiValueDictionary used to determine MultiValueDictionary modification
            during enumeration
            </summary>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that is 
            empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            for <typeparamref name="TKey"/>.
            </summary>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity must be >= 0</exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class 
            that is empty, has the default initial capacity, and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class 
            that is empty, has the specified initial capacity, and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt; and uses the 
            default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            </summary>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt; and uses the 
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Int32)">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt;
            and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt;
            and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValueCollection"/> must not have
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Int32,System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param> 
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Creates a new new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> 
            class that is empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for <typeparamref name="TKey"/>. The 
            internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="capacity">Initial number of keys that the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> will allocate space for</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity must be >= 0</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}},System.Func{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt;
            and uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Create``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,RestSharp.Portable.IReadOnlyCollection{`1}}},System.Collections.Generic.IEqualityComparer{`0},System.Func{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> class that contains 
            elements copied from the specified IEnumerable&lt;KeyValuePair&lt;TKey, IReadOnlyCollection&lt;TValue&gt;&gt;&gt;
            and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for the <typeparamref name="TKey"/> type.
            The internal dictionary will use instances of the <typeparamref name="TValueCollection"/>
            class as its collection type.
            </summary>
            <typeparam name="TValueCollection">
            The collection type that this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />
            will contain in its internal dictionary.
            </typeparam>
            <param name="enumerable">IEnumerable to copy elements into this from</param>
            <param name="comparer">Specified comparer to use for the <typeparamref name="TKey"/>s</param>
            <param name="collectionFactory">A function to create a new <see cref="T:System.Collections.Generic.ICollection`1"/> to use
            in the internal dictionary store of this <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.</param> 
            <returns>A new <see cref="T:RestSharp.Portable.MultiValueDictionary`2" /> with the specified
            parameters.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="collectionFactory"/> must create collections with
            IsReadOnly set to true by default.</exception>
            <exception cref="T:System.ArgumentNullException">enumerable must be non-null</exception>
            <remarks>If <paramref name="comparer"/> is set to null, then the default <see cref="T:System.Collections.IEqualityComparer" /> for <typeparamref name="TKey"/> is used.</remarks>
            <remarks>
            Note that <typeparamref name="TValueCollection"/> must implement <see cref="T:System.Collections.Generic.ICollection`1"/>
            in addition to being constructable through new(). The collection returned from the constructor
            must also not have IsReadOnly set to True by default.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <typeparamref name="TKey"/> and <typeparamref name="TValue"/> to the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to add.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            Unlike the Add for <see cref="T:System.Collections.IDictionary" />, the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> Add will not
            throw any exceptions. If the given <typeparamref name="TKey"/> is already in the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>,
            then <typeparamref name="TValue"/> will be added to <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> associated with <paramref name="key"/>
            </remarks>
            <remarks>
            A call to this Add method will always invalidate any currently running enumeration regardless
            of whether the Add method actually modified the <see cref="T:RestSharp.Portable.MultiValueDictionary`2" />.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a number of key-value pairs to this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>, where
            the key for each value is <paramref name="key"/>, and the value for a pair
            is an element from <paramref name="values"/>
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of all entries to add</param>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values to add</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> and <paramref name="values"/> must be non-null</exception>
            <remarks>
            A call to this AddRange method will always invalidate any currently running enumeration regardless
            of whether the AddRange method actually modified the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Remove(`0)">
            <summary>
            Removes every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>
            from the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to remove</param>
            <returns><c>true</c> if the removal was successful; otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the first instance (if any) of the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> 
            pair from this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>. 
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to remove</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to remove</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <returns><c>true</c> if the removal was successful; otherwise <c>false</c></returns>
            <remarks>
            If the <typeparamref name="TValue"/> being removed is the last one associated with its <typeparamref name="TKey"/>, then that 
            <typeparamref name="TKey"/> will be removed from the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> and its 
            associated <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> will be freed as if a call to <see cref="M:RestSharp.Portable.MultiValueDictionary`2.Remove(`0)"/>
            had been made.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Contains(`0,`1)">
            <summary>
            Determines if the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> 
            pair exists within this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element.</param>
            <returns><c>true</c> if found; otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.ContainsValue(`1)">
            <summary>
            Determines if the given <typeparamref name="TValue"/> exists within this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <param name="value">A <typeparamref name="TValue"/> to search the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> for</param>
            <returns><c>true</c> if the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> contains the <paramref name="value"/>; otherwise <c>false</c></returns>      
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Clear">
            <summary>
            Removes every <typeparamref name="TKey"/> and <typeparamref name="TValue"/> from this 
            <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the given <typeparamref name="TKey"/> exists within this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> and has
            at least one <typeparamref name="TValue"/> associated with it.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> to search the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> for</param>
            <returns><c>true</c> if the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> contains the requested <typeparamref name="TKey"/>;
            otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="P:RestSharp.Portable.MultiValueDictionary`2.Keys">
            <summary>
            Gets each <typeparamref name="TKey"/> in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> that
            has one or more associated <typeparamref name="TValue"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing each <typeparamref name="TKey"/> 
            in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> that has one or more associated 
            <typeparamref name="TValue"/>.
            </value>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.TryGetValue(`0,RestSharp.Portable.IReadOnlyCollection{`1}@)">
            <summary>
            Attempts to get the <typeparamref name="TValue"/> associated with the given
            <typeparamref name="TKey"/> and place it into <paramref name="value"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to retrieve</param>
            <param name="value">
            When this method returns, contains the <typeparamref name="TValue"/> associated with the specified
            <typeparamref name="TKey"/> if it is found; otherwise contains the default value of <typeparamref name="TValue"/>.
            </param>
            <returns>
            <c>true</c> if the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> contains an element with the specified 
            <typeparamref name="TKey"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="P:RestSharp.Portable.MultiValueDictionary`2.Values">
            <summary>
            Gets an enumerable of <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> from this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>,
            where each <see cref="T:RestSharp.Portable.IReadOnlyCollection`1" /> is the collection of every <typeparamref name="TValue"/> associated
            with a <typeparamref name="TKey"/> present in the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>. 
            </summary>
            <value>An IEnumerable of each <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> in this 
            <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/></value>
        </member>
        <member name="P:RestSharp.Portable.MultiValueDictionary`2.Item(`0)">
            <summary>
            Get every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>. If 
            <paramref name="key"/> is not found in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>, will 
            throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not have any associated 
            <typeparamref name="TValue"/>s in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.</exception>
            <value>
            An <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> containing every <typeparamref name="TValue"/>
            associated with <paramref name="key"/>.
            </value>
            <remarks>
            Note that the <see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/> returned will change alongside any changes 
            to the <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/> 
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.MultiValueDictionary`2.Count">
            <summary>
            Returns the number of <typeparamref name="TKey"/>s with one or more associated <typeparamref name="TValue"/>
            in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <value>The number of <typeparamref name="TKey"/>s in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.</value>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.GetEnumerator">
            <summary>
            Get an Enumerator over the <typeparamref name="TKey"/>-<see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/>
            pairs in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.
            </summary>
            <returns>an Enumerator over the <typeparamref name="TKey"/>-<see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/>
            pairs in this <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>.</returns>
        </member>
        <member name="T:RestSharp.Portable.MultiValueDictionary`2.Enumerator">
            <summary>
            The Enumerator class for a <see cref="T:RestSharp.Portable.MultiValueDictionary`2"/>
            that iterates over <code>TKey</code>-<see cref="T:RestSharp.Portable.IReadOnlyCollection`1"/>
            pairs.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Enumerator.#ctor(RestSharp.Portable.MultiValueDictionary{`0,`1})">
            <summary>
            Constructor for the enumerator
            </summary>
            <param name="multiValueDictionary">A MultiValueDictionary to iterate over</param>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:RestSharp.Portable.MultiValueDictionary`2.Enumerator.Dispose">
            <summary>
            Frees resources associated with this Enumerator
            </summary>
        </member>
        <member name="T:RestSharp.Portable.MultiValueDictionary`2.InnerCollectionView">
            <summary>
            An inner class that functions as a view of an ICollection within a MultiValueDictionary
            </summary>
        </member>
        <member name="T:RestSharp.Portable.Parameter">
            <summary>
            Parameter container for REST requests
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Parameter" /> class.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Parameter.Name">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Parameter.Type">
            <summary>
            Gets or sets the type of the parameter
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Parameter.ContentType">
            <summary>
            Gets or sets the content type of the parameter
            </summary>
            <remarks>
            Applies to the following parameter types:
            - RequestBody
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.Parameter.ValidateOnAdd">
            <summary>
            Gets or sets a value indicating whether this parameter should be validated?
            </summary>
            <remarks>
            Applies to the following parameter types:
            - HttpHeader
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.Parameter.Encoding">
            <summary>
            Gets or sets the encoding of this parameters value
            </summary>
            <remarks>
            Applies to the following parameter types:
            - GetOrPost
            - QueryString
            - UrlSegment
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.Parameter.ToRequestString">
            <summary>
            Returns the parameter value as string
            </summary>
            <returns>Returns the value as string</returns>
        </member>
        <member name="T:RestSharp.Portable.ParameterCollection">
            <summary>
            The internal implementation of a <see cref="T:RestSharp.Portable.IParameterCollection"/>
            </summary>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.ParameterCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.ParameterCollection.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Find(RestSharp.Portable.ParameterType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Add(RestSharp.Portable.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.AddOrUpdate(RestSharp.Portable.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Contains(RestSharp.Portable.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.CopyTo(RestSharp.Portable.Parameter[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Remove(RestSharp.Portable.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.Remove(RestSharp.Portable.ParameterType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:RestSharp.Portable.ParameterExtensions">
            <summary>
            Extension methods for Parameter(s)
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterExtensions.DefaultEncoding">
            <summary>
            The default encoding for POST parameters
            </summary>
        </member>
        <member name="M:RestSharp.Portable.ParameterExtensions.GetGetOrPostParameters(System.Collections.Generic.IEnumerable{RestSharp.Portable.Parameter})">
            <summary>
            Get the GetOrPost parameters (by default without file parameters, which are POST-only)
            </summary>
            <param name="parameters">
            The list of parameters to filter
            </param>
            <returns>
            The list of GET or POST parameters
            </returns>
        </member>
        <member name="M:RestSharp.Portable.ParameterExtensions.GetGetOrPostParameters(System.Collections.Generic.IEnumerable{RestSharp.Portable.Parameter},System.Boolean)">
            <summary>
            Get the GetOrPost parameters (by default without file parameters, which are POST-only)
            </summary>
            <param name="parameters">
            The list of parameters to filter
            </param>
            <param name="withFile">
            true == with file parameters, but those are POST-only!
            </param>
            <returns>
            The list of GET or POST parameters
            </returns>
        </member>
        <member name="M:RestSharp.Portable.ParameterExtensions.GetFileParameters(System.Collections.Generic.IEnumerable{RestSharp.Portable.Parameter})">
            <summary>
            Get the file parameters
            </summary>
            <param name="parameters">
            The list of parameters to filter
            </param>
            <returns>
            The list of POST file parameters
            </returns>
        </member>
        <member name="M:RestSharp.Portable.ParameterExtensions.IsContentParameter(RestSharp.Portable.Parameter)">
            <summary>
            Is the given parameter a content parameter?
            </summary>
            <param name="parameter">the parameter to test</param>
            <returns>true when the parameter is a content parameter</returns>
        </member>
        <member name="M:RestSharp.Portable.ParameterExtensions.ToEncodedString(RestSharp.Portable.Parameter,System.Boolean)">
            <summary>
            Convert the given parameter into an encoded string
            </summary>
            <param name="parameter">The parameter value to convert into a URL encoded string</param>
            <param name="spaceAsPlus">Replace the SPC (<code>#20</code>) character with a plus</param>
            <returns>The URL encoded string</returns>
        </member>
        <member name="T:RestSharp.Portable.ParameterKey">
            <summary>
            The key for a parameter
            </summary>
        </member>
        <member name="M:RestSharp.Portable.ParameterKey.#ctor(RestSharp.Portable.ParameterType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.ParameterKey"/> class.
            </summary>
            <param name="type">The parameter type</param>
            <param name="name">The parameter name</param>
        </member>
        <member name="M:RestSharp.Portable.ParameterKey.#ctor(RestSharp.Portable.Parameter)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.ParameterKey"/> class.
            </summary>
            <param name="parameter">The parameter to create the key from</param>
        </member>
        <member name="P:RestSharp.Portable.ParameterKey.Type">
            <summary>
            Gets the parameter type
            </summary>
        </member>
        <member name="P:RestSharp.Portable.ParameterKey.Name">
            <summary>
            Gets the parameter name
            </summary>
        </member>
        <member name="T:RestSharp.Portable.ParameterKeyComparer">
            <summary>
            Compares parameter keys
            </summary>
        </member>
        <member name="M:RestSharp.Portable.ParameterKeyComparer.Compare(RestSharp.Portable.ParameterKey,RestSharp.Portable.ParameterKey)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterKeyComparer.Equals(RestSharp.Portable.ParameterKey,RestSharp.Portable.ParameterKey)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.ParameterKeyComparer.GetHashCode(RestSharp.Portable.ParameterKey)">
            <inheritdoc/>
        </member>
        <member name="T:RestSharp.Portable.ParameterType">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterType.GetOrPost">
            <summary>
            Parameter will be stored in the URL query for a GET request, or in the body for a POST request
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterType.UrlSegment">
            <summary>
            The parameter is part of the IRestResponse.Resource
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterType.QueryString">
            <summary>
            The parameter is part of the resulting URL query
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterType.HttpHeader">
            <summary>
            The parameter will be sent as HTTP header
            </summary>
        </member>
        <member name="F:RestSharp.Portable.ParameterType.RequestBody">
            <summary>
            The parameter will be sent in the HTTP POST body
            </summary>
        </member>
        <member name="T:RestSharp.Portable.PlatformSupport">
            <summary>
            Some platform specific implementations
            </summary>
        </member>
        <member name="P:RestSharp.Portable.PlatformSupport.IsSilverlight">
            <summary>
            Gets a value indicating whether this library runs in the Silverlight environment.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.PlatformSupport.IsMono">
            <summary>
            Gets a value indicating whether this library runs in the Mono environment.
            </summary>
        </member>
        <member name="T:RestSharp.Portable.PostParametersContent">
            <summary>
            Provides a <see cref="T:RestSharp.Portable.IHttpContent"/> implementation for POST parameters.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.#ctor(System.Collections.Generic.IEnumerable{RestSharp.Portable.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.PostParametersContent"/> class.
            </summary>
            <param name="postParameters">The post parameters to provide as content.</param>
        </member>
        <member name="P:RestSharp.Portable.PostParametersContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.TryComputeLength(System.Int64@)">
            <summary>
            Try to compute the resulting length of all POST parameters.
            </summary>
            <param name="length">The variable that will be set to the computed length</param>
            <returns>true, when the length could be computed</returns>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.Dispose">
            <summary>
            Disposes the underlying HTTP request message
            </summary>
        </member>
        <member name="M:RestSharp.Portable.PostParametersContent.Dispose(System.Boolean)">
            <summary>
            Disposes the underlying HTTP request message when disposing is set to true
            </summary>
            <param name="disposing">true, when called from <see cref="M:RestSharp.Portable.PostParametersContent.Dispose"/>.</param>
        </member>
        <member name="T:RestSharp.Portable.PropertyFilterMode">
            <summary>
            Filter mode for the <see cref="M:RestSharp.Portable.RestRequestExtensions.AddObject(RestSharp.Portable.IRestRequest,System.Object,System.Collections.Generic.IEnumerable{System.String},RestSharp.Portable.PropertyFilterMode)"/> extension method
            </summary>
        </member>
        <member name="F:RestSharp.Portable.PropertyFilterMode.Include">
            <summary>
            Include the given properties
            </summary>
        </member>
        <member name="F:RestSharp.Portable.PropertyFilterMode.Exclude">
            <summary>
            Exclude the given properties
            </summary>
        </member>
        <member name="T:RestSharp.Portable.RequestParameters">
            <summary>
            Merged parameters - partially split by usage
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RequestParameters.#ctor(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RequestParameters"/> class.
            </summary>
            <param name="client">The <see cref="T:RestSharp.Portable.IRestClient"/> for the default parameters</param>
            <param name="request">The <see cref="T:RestSharp.Portable.IRestRequest"/> for the request specific parameters</param>
        </member>
        <member name="P:RestSharp.Portable.RequestParameters.Parameters">
            <summary>
            Gets all parameters
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RequestParameters.OtherParameters">
            <summary>
            Gets all parameters that aren't content header parameters
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RequestParameters.ContentHeaderParameters">
            <summary>
            Gets all content header parameters
            </summary>
        </member>
        <member name="T:RestSharp.Portable.RestClientBase">
            <summary>
            The default REST client
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.#ctor(RestSharp.Portable.IHttpClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestClientBase" /> class.
            </summary>
            <param name="httpClientFactory">The HTTP client factory to use</param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.#ctor(RestSharp.Portable.IHttpClientFactory,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestClientBase" /> class.
            </summary>
            <param name="httpClientFactory">The HTTP client factory to use</param>
            <param name="baseUrl">Base URL</param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.#ctor(RestSharp.Portable.IHttpClientFactory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestClientBase" /> class.
            </summary>
            <param name="httpClientFactory">The HTTP client factory to use</param>
            <param name="baseUrl">Base URL</param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:RestSharp.Portable.RestClientBase"/> class.
            </summary>
            <remarks>
            Calls <see cref="M:RestSharp.Portable.RestClientBase.Dispose(System.Boolean)"/> with <code>false</code>
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.HttpClientFactory">
            <summary>
            Gets or sets the HTTP client factory used to create IHttpClient implementations
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.BaseUrl">
            <summary>
            Gets or sets the base URL for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.Authenticator">
            <summary>
            Gets or sets the Authenticator to use for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.CookieContainer">
            <summary>
            Gets or sets the Cookies for all requests
            </summary>
            <remarks>
            Cookies set by the server will be collected here.
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.Timeout">
            <summary>
            Gets or sets the timeout to be used for requests.
            </summary>
            <remarks>
            When the value isn't set, it uses the default timeout of whatever
            is used to implement the <see cref="T:RestSharp.Portable.IHttpClientFactory"/>.
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.ContentHandlers">
            <inheritdoc />
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.EncodingHandlers">
            <inheritdoc />
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.UserAgent">
            <summary>
            Gets or sets the user agent for the REST client
            </summary>
            <remarks>
            The default value is "RestSharp/{version}"
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.DefaultParameters">
            <summary>
            Gets the collection of the default parameters for all requests
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.Credentials">
            <summary>
            Gets or sets the credentials used for the request (e.g. NTLM authentication)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.IgnoreResponseStatusCode">
            <summary>
            Gets or sets a value indicating whether the response status code should be ignored by default.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestClientBase.Proxy">
            <summary>
            Gets or sets the proxy to use for the requests
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Dispose">
            <summary>
            Disposes the used HTTP client
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Execute(RestSharp.Portable.IRestRequest)">
            <summary>
            Execute the given request
            </summary>
            <param name="request">Request to execute</param>
            <returns>Response returned</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Execute``1(RestSharp.Portable.IRestRequest)">
            <summary>
            Execute the given request
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="request">Request to execute</param>
            <returns>Response returned, with a deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Execute(RestSharp.Portable.IRestRequest,System.Threading.CancellationToken)">
            <summary>
            Cancellable request execution
            </summary>
            <param name="request">Request to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>Response returned</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Execute``1(RestSharp.Portable.IRestRequest,System.Threading.CancellationToken)">
            <summary>
            Cancellable request execution
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="request">Request to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>Response returned, with a deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.GetHandler(System.String)">
            <summary>
            Get a previously added content type handler
            </summary>
            <param name="contentType">The Accept header value that identifies the handler</param>
            <returns>The deserializer that can handle the given content type.</returns>
            <remarks>
            This function returns NULL if the handler for the given content type cannot be found.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.GetEncoding(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get a previously added content encoding handler
            </summary>
            <param name="encodingIds">The Accept-Encoding header value that identifies the handler</param>
            <returns>The handler that can decode the given content encoding.</returns>
            <remarks>
            This function returns NULL if the handler for the given content encoding cannot be found.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.AddHandler(System.String,RestSharp.Portable.IDeserializer)">
            <summary>
            Add a new content type handler
            </summary>
            <param name="contentType">The Accept header value</param>
            <param name="deserializer">The deserializer to decode the content</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.RemoveHandler(System.String)">
            <summary>
            Remove a previously added content type handler
            </summary>
            <param name="contentType">The Accept header value that identifies the handler</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.ClearHandlers">
            <summary>
            Remove all previously added content type handlers
            </summary>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.AddEncoding(System.String,RestSharp.Portable.IEncoding)">
            <summary>
            Add a new content encoding handler
            </summary>
            <param name="encodingId">The Accept-Encoding header value</param>
            <param name="encoding">The encoding engine to decode the content</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.RemoveEncoding(System.String)">
            <summary>
            Remove a previously added content encoding handler
            </summary>
            <param name="encodingId">The Accept-Encoding header value that identifies the handler</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.ClearEncodings">
            <summary>
            Remove all previously added content encoding handlers
            </summary>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.UpdateAcceptHeader">
            <summary>
            Updates the <code>Accept</code> default header parameter
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.GetContent(RestSharp.Portable.IRestRequest,RestSharp.Portable.RequestParameters)">
            <summary>
            Gets the content for a request.
            </summary>
            <param name="request">The <see cref="T:RestSharp.Portable.IRestRequest"/> to get the content for.</param>
            <param name="parameters">The request parameters for the REST request (read-only)</param>
            <returns>The <see cref="T:RestSharp.Portable.IHttpContent"/> for the <paramref name="request"/></returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.ModifyRequestBeforeAuthentication(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage)">
            <summary>
            Allows the implementor to modify the <paramref name="httpClient"/> and the <paramref name="requestMessage"/>
            before the request gets authenticated and sent.
            </summary>
            <param name="httpClient">The <see cref="T:RestSharp.Portable.IHttpClient"/> used to send the <paramref name="requestMessage"/></param>
            <param name="requestMessage">The <see cref="T:RestSharp.Portable.IHttpRequestMessage"/> to send</param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.ExecuteRequest(RestSharp.Portable.IRestRequest,System.Threading.CancellationToken)">
            <summary>
            Execute the request (which is unguarded)
            </summary>
            <param name="request">The request to execute</param>
            <param name="ct">The cancellation token to use</param>
            <returns>The <see cref="T:RestSharp.Portable.IHttpResponseMessage"/> for the request</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:RestSharp.Portable.IHttpClient"/>.
            </summary>
            <param name="disposing"><code>true</code> when called from <see cref="M:RestSharp.Portable.RestClientBase.Dispose"/></param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.ContentHandlersOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the <code>Accepts</code> header whenever the list of content handlers changes
            </summary>
            <param name="sender">The observable dictionary</param>
            <param name="args">The changes</param>
        </member>
        <member name="M:RestSharp.Portable.RestClientBase.EncodingHandlersOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the <code>Accept-Encoding</code> header whenever the list of encoding handlers changes
            </summary>
            <param name="sender">The observable dictionary</param>
            <param name="args">The changes</param>
        </member>
        <member name="T:RestSharp.Portable.RestClientExtensions">
            <summary>
            Extension functions for REST clients
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.AddDefaultParameter(RestSharp.Portable.IRestClient,System.String,System.Object)">
            <summary>
            Add a default parameter to a REST client
            </summary>
            <param name="client">REST client to add the new parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST client to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.AddDefaultParameter(RestSharp.Portable.IRestClient,System.String,System.Object,RestSharp.Portable.ParameterType)">
            <summary>
            Add a default parameter to a REST client
            </summary>
            <param name="client">REST client to add the new parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Type of the parameter</param>
            <returns>The REST client to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.AddDefaultParameter(RestSharp.Portable.IRestClient,RestSharp.Portable.Parameter)">
            <summary>
            Add a default parameter to a REST client
            </summary>
            <param name="client">REST client to add the new parameter to</param>
            <param name="parameter">The parameter to add</param>
            <returns>The REST client to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.RemoveDefaultParameter(RestSharp.Portable.IRestClient,System.String)">
            <summary>
            Remove a default parameter from the REST client
            </summary>
            <param name="client">REST client to remove the parameter from</param>
            <param name="name">Name of the parameter</param>
            <returns>The REST client to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.BuildUri(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Build the full URL for a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The REST request</param>
            <returns>Resulting URL</returns>
            <remarks>
            The resulting URL is a combination of the REST client's BaseUrl and the REST requests
            Resource, where all URL segments are replaced and - optionally - the query parameters
            added.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.BuildUri(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Boolean)">
            <summary>
            Build the full URL for a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The REST request</param>
            <param name="withQuery">Should the resulting URL contain the query?</param>
            <returns>Resulting URL</returns>
            <remarks>
            The resulting URL is a combination of the REST client's BaseUrl and the REST requests
            Resource, where all URL segments are replaced and - optionally - the query parameters
            added.
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.GetEffectiveHttpMethod(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Returns the real HTTP method that must be used to execute a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The request to determine the HTTP method for</param>
            <returns>The real HTTP method that must be used</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.GetEffectiveHttpMethod(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Collections.Generic.IList{RestSharp.Portable.Parameter})">
            <summary>
            Returns the real HTTP method that must be used to execute a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The request to determine the HTTP method for</param>
            <param name="parameters">The request parameters for the REST request except the content header parameters (read-only)</param>
            <returns>The real HTTP method that must be used</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.ReplaceHandler(RestSharp.Portable.IRestClient,System.Type,RestSharp.Portable.IDeserializer)">
            <summary>
            Replace all handlers of a given type with a new deserializer
            </summary>
            <param name="client">The REST client</param>
            <param name="oldType">The type of the old deserializer</param>
            <param name="deserializer">The new deserializer</param>
            <returns>The client itself, to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.MergeParameters(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Merge parameters from client and request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The REST request</param>
            <returns>A <see cref="T:RestSharp.Portable.RequestParameters"/> object that contains the merged parameters</returns>
        </member>
        <member name="M:RestSharp.Portable.RestClientExtensions.GetDefaultMethod(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Collections.Generic.IList{RestSharp.Portable.Parameter})">
            <summary>
            Returns the HTTP method GET or POST - depending on the parameters
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">The request to determine the HTTP method for</param>
            <param name="parameters">The request parameters for the REST request except the content header parameters (read-only)</param>
            <returns>GET or POST</returns>
        </member>
        <member name="T:RestSharp.Portable.RestRequest">
            <summary>
            The default REST request
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor(RestSharp.Portable.Method)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
            <param name="method">The HTTP request method to use</param>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
            <param name="resource">The resource this request is targeting</param>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor(System.String,RestSharp.Portable.Method)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
            <param name="resource">The resource this request is targeting</param>
            <param name="method">The HTTP request method</param>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
            <param name="resource">The resource this request is targeting</param>
        </member>
        <member name="M:RestSharp.Portable.RestRequest.#ctor(System.Uri,RestSharp.Portable.Method)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestRequest" /> class.
            </summary>
            <param name="resource">The resource this request is targeting</param>
            <param name="method">The HTTP request method</param>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.Method">
            <summary>
            Gets or sets the HTTP request method (GET, POST, etc...)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.Resource">
            <summary>
            Gets or sets the resource relative to the REST clients base URL
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.Parameters">
            <summary>
            Gets the REST request parameters
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.Serializer">
            <summary>
            Gets or sets the serializer that should serialize the body
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.ContentCollectionMode">
            <summary>
            Gets or sets the content collection mode which controls if we use basic content or multi part content by default.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestRequest.ResponseWriterAsync">
            <summary>
            Gets or sets the method to use to write the response instead of reading into RawBytes
            </summary>
        </member>
        <member name="T:RestSharp.Portable.RestRequestExtensions">
            <summary>
            Extension functions for REST requests
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddJsonBody(RestSharp.Portable.IRestRequest,System.Object)">
            <summary>
            Body to add to the parameters using a default <see cref="T:RestSharp.Portable.Serializers.JsonSerializer"/>.
            </summary>
            <param name="request">
            The REST request to add this parameter to
            </param>
            <param name="obj">
            Object to serialize to the request body
            </param>
            <returns>
            The request object to allow call chains
            </returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddXmlBody(RestSharp.Portable.IRestRequest,System.Object)">
            <summary>
            Body to add to the parameters using a default <see cref="T:RestSharp.Portable.Serializers.XmlDataContractSerializer"/>.
            </summary>
            <param name="request">
            The REST request to add this parameter to
            </param>
            <param name="obj">
            Object to serialize to the request body
            </param>
            <returns>
            The request object to allow call chains
            </returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddBody(RestSharp.Portable.IRestRequest,System.Object)">
            <summary>
            Body to add to the parameters using the <see cref="P:RestSharp.Portable.IRestRequest.Serializer" />
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="obj">Object to serialize to the request body</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddBody(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Named body to add to the parameters using the <see cref="P:RestSharp.Portable.IRestRequest.Serializer" />
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">The body parameter name (required for multipart form requests)</param>
            <param name="obj">Object to serialize to the request body</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddBody(RestSharp.Portable.IRestRequest,System.String,System.String,System.Text.Encoding)">
            <summary>
            Named body to add to the parameters as plain text.
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">The body parameter name (required for multipart form requests)</param>
            <param name="text">Text to send in the request body</param>
            <param name="encoding">Encoding for the <paramref name="text"/></param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddBody(RestSharp.Portable.IRestRequest,System.String,System.Text.Encoding)">
            <summary>
            Unnamed body to add to the parameters as plain text.
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="text">Text to send in the request body</param>
            <param name="encoding">Encoding for the <paramref name="text"/></param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddObject(RestSharp.Portable.IRestRequest,System.Object,System.String[])">
            <summary>
            Port of AddObject to RestSharp.Portable
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="obj">Object to serialize to the request body</param>
            <param name="includedProperties">Properties to include</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddObject(RestSharp.Portable.IRestRequest,System.Object,System.Collections.Generic.IEnumerable{System.String},RestSharp.Portable.PropertyFilterMode)">
            <summary>
            Automatically create parameters from object properties
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="obj">Object to serialize to the request body</param>
            <param name="objProperties">The object properties</param>
            <param name="filterMode">Include or exclude the properties?</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddParameter(RestSharp.Portable.IRestRequest,RestSharp.Portable.Parameter)">
            <summary>
            Generic add parameters function
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="parameter">Parameter to add</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateParameter(RestSharp.Portable.IRestRequest,RestSharp.Portable.Parameter)">
            <summary>
            Generic add or update parameters function
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="parameter">Parameter to add</param>
            <returns>The request object to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddQueryParameter(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add a query parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateQueryParameter(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add or update a query parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddUrlSegment(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add an URL segment parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddHeader(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add a HTTP HEADER parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateHeader(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add or update a HTTP HEADER parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddParameter(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add a parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateParameter(RestSharp.Portable.IRestRequest,System.String,System.Object)">
            <summary>
            Add or updates a parameter to a REST request
            </summary>
            <param name="request">The REST request to add or update this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddParameter(RestSharp.Portable.IRestRequest,System.String,System.Object,RestSharp.Portable.ParameterType)">
            <summary>
            Add a parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Type of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateParameter(RestSharp.Portable.IRestRequest,System.String,System.Object,RestSharp.Portable.ParameterType)">
            <summary>
            Add or update a parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Type of the parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddParameter(RestSharp.Portable.IRestRequest,System.String,System.Object,RestSharp.Portable.ParameterType,System.String)">
            <summary>
            Add a parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="contentType">Content type for the parameter (only applicable to a Body parameter)</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddOrUpdateParameter(RestSharp.Portable.IRestRequest,System.String,System.Object,RestSharp.Portable.ParameterType,System.String)">
            <summary>
            Add or update a parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="contentType">Content type for the parameter (only applicable to a Body parameter)</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddFile(RestSharp.Portable.IRestRequest,System.String,System.Byte[],System.String)">
            <summary>
            Add a file parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="bytes">File content</param>
            <param name="fileName">File name</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddFile(RestSharp.Portable.IRestRequest,System.String,System.Byte[],System.String,System.String)">
            <summary>
            Add a file parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="bytes">File content</param>
            <param name="fileName">File name</param>
            <param name="contentType">Content type for the parameter (only applicable to a Body parameter)</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddFile(RestSharp.Portable.IRestRequest,System.String,System.IO.Stream,System.String)">
            <summary>
            Add a file parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="input">File content</param>
            <param name="fileName">File name</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddFile(RestSharp.Portable.IRestRequest,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Add a file parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="name">Name of the parameter</param>
            <param name="input">File content</param>
            <param name="fileName">File name</param>
            <param name="contentType">Content type for the parameter (only applicable to a Body parameter)</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="M:RestSharp.Portable.RestRequestExtensions.AddFile(RestSharp.Portable.IRestRequest,RestSharp.Portable.FileParameter)">
            <summary>
            Add a file parameter to a REST request
            </summary>
            <param name="request">The REST request to add this parameter to</param>
            <param name="parameter">The new file parameter</param>
            <returns>The REST request to allow call chains</returns>
        </member>
        <member name="T:RestSharp.Portable.RestResponse">
            <summary>
            The default REST response
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestResponse.#ctor(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestResponse" /> class.
            </summary>
            <param name="client">REST client</param>
            <param name="request">REST request</param>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.Request">
            <summary>
            Gets the Request that resulted in this response
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.ResponseUri">
            <summary>
            Gets the full response URL
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.RawBytes">
            <summary>
            Gets the raw data
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.ContentType">
            <summary>
            Gets the content type of the raw data
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.Cookies">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.Headers">
            <summary>
            Gets the response headers (without content headers)
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.IsSuccess">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.StatusCode">
            <summary>
            Gets the HTTP status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.StatusDescription">
            <summary>
            Gets the description for the HTTP status code
            </summary>
        </member>
        <member name="P:RestSharp.Portable.RestResponse.Content">
            <inheritdoc />
        </member>
        <member name="P:RestSharp.Portable.RestResponse.Client">
            <summary>
            Gets the REST client that created this response
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestResponse.CreateResponse(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.IHttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:RestSharp.Portable.IRestResponse"/> from a <see cref="T:RestSharp.Portable.IRestClient"/>, <see cref="T:RestSharp.Portable.IRestRequest"/> and a <see cref="T:RestSharp.Portable.IHttpResponseMessage"/>.
            </summary>
            <param name="client">The <see cref="T:RestSharp.Portable.IRestClient"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="request">The <see cref="T:RestSharp.Portable.IRestRequest"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="responseMessage">The <see cref="T:RestSharp.Portable.IHttpResponseMessage"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="ct">The cancellation token</param>
            <returns>The new <see cref="T:RestSharp.Portable.IRestResponse"/></returns>
        </member>
        <member name="M:RestSharp.Portable.RestResponse.CreateResponse``1(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.IHttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:RestSharp.Portable.IRestResponse"/> from a <see cref="T:RestSharp.Portable.IRestClient"/>, <see cref="T:RestSharp.Portable.IRestRequest"/> and a <see cref="T:RestSharp.Portable.IHttpResponseMessage"/>.
            </summary>
            <typeparam name="T">The type to instantiate the response for.</typeparam>
            <param name="client">The <see cref="T:RestSharp.Portable.IRestClient"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="request">The <see cref="T:RestSharp.Portable.IRestRequest"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="responseMessage">The <see cref="T:RestSharp.Portable.IHttpResponseMessage"/> used to create a <see cref="T:RestSharp.Portable.IRestResponse"/></param>
            <param name="ct">The cancellation token</param>
            <returns>The new <see cref="T:RestSharp.Portable.IRestResponse"/></returns>
        </member>
        <member name="M:RestSharp.Portable.RestResponse.LoadResponse(RestSharp.Portable.IHttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Utility function that really initializes this response object from
            a HttpResponseMessage
            </summary>
            <param name="response">Response that will be used to initialize this response.</param>
            <param name="ct">The cancellation token</param>
            <returns>Task, because this function runs asynchronously</returns>
        </member>
        <member name="T:RestSharp.Portable.RestResponseExtensions">
            <summary>
            Extensions for <see cref="T:RestSharp.Portable.RestResponse"/>
            </summary>
        </member>
        <member name="F:RestSharp.Portable.RestResponseExtensions._defaultEncoding">
            <summary>
            The default encoding, when none could be detected
            </summary>
        </member>
        <member name="M:RestSharp.Portable.RestResponseExtensions.GetStringContent(RestSharp.Portable.IRestResponse)">
            <summary>
            Converts a byte array to a string, using its byte order mark to convert it to the right encoding.
            http://www.shrinkrays.net/code-snippets/csharp/an-extension-method-for-converting-a-byte-array-to-a-string.aspx
            </summary>
            <param name="response">The REST response</param>
            <returns><see cref="P:RestSharp.Portable.IRestResponse.RawBytes"/> as a string</returns>
        </member>
        <member name="T:RestSharp.Portable.RestResponse`1">
            <summary>
            The REST response which contains the deserialized value.
            </summary>
            <typeparam name="T">
            The type to deserialize
            </typeparam>
        </member>
        <member name="M:RestSharp.Portable.RestResponse`1.#ctor(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.RestResponse`1"/> class.
            </summary>
            <param name="client">
            REST client
            </param>
            <param name="request">
            REST request
            </param>
        </member>
        <member name="P:RestSharp.Portable.RestResponse`1.Data">
            <summary>
            Gets the deserialized object of type T
            </summary>
            <remarks>
            When the object cannot be deserialized, this property
            contains the value of default(T).
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.RestResponse`1.LoadResponse(RestSharp.Portable.IHttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Utility function that really initializes this response object from
            a HttpResponseMessage
            </summary>
            <param name="response">
            Response that will be used to initialize this response.
            </param>
            <param name="ct">The cancellation token</param>
            <returns>
            Task, because this function runs asynchronously
            </returns>
            <remarks>
            This override also deserializes the response
            </remarks>
        </member>
        <member name="T:RestSharp.Portable.UrlEscapeFlags">
            <summary>
            Modifies how the URL escape functions work
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.Default">
            <summary>
            Default behavior
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.LikeEscapeDataString">
            <summary>
            Compatibility with Uri.EscapeDataString(string)
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.LikeUrlEncode">
            <summary>
            Compatibility with HttpUtility.UrlEncode(string)
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowLikeEscapeDataString">
            <summary>
            Allow all characters that are allowed by <see cref="M:System.Uri.EscapeDataString(System.String)"/>
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowAllUnreserved">
            <summary>
            Allow all unreserved characters and not just -_.!~
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowLikeUrlEncode">
            <summary>
            Allow all characters that are allowed by UrlEncode
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowLikeEscapeUriString">
            <summary>
            Allow all characters that are allowed by <see cref="M:System.Uri.EscapeUriString(System.String)"/>
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowLikeWebRequest">
            <summary>
            Allow all characters that are allowed by a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.AllowMask">
            <summary>
            The mask for all variants of allowed character sets
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.LowerCaseHexCharacters">
            <summary>
            Lower case hexadecimal characters
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.EscapeSpaceAsPlus">
            <summary>
            Escapes a space character (0x20) as plus
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.BuilderVariantMask">
            <summary>
            The mask for all builder variants
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.BuilderVariantListByteArray">
            <summary>
            Use a list of byte arrays to build the result
            </summary>
        </member>
        <member name="F:RestSharp.Portable.UrlEscapeFlags.BuilderVariantListByte">
            <summary>
            Use a list of bytes to build the result
            </summary>
        </member>
        <member name="T:RestSharp.Portable.UrlEscapeUtility">
            <summary>
            Helper class for URL escaping of data
            </summary>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.String)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.String,System.Text.Encoding)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.Byte[])">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.String)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.String,System.Text.Encoding)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.Byte[])">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.String)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.String,System.Text.Encoding)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.Byte[])">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.Escape(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string to a byte array</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.ComputeLength(System.Byte[],RestSharp.Portable.UrlEscapeFlags,System.Collections.Generic.ISet{System.Byte})">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <param name="allowedBytes">The bytes that don't need to be escaped</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes1(System.Byte[],RestSharp.Portable.UrlEscapeFlags,System.Byte[],System.Collections.Generic.ISet{System.Byte})">
            <summary>
            Variant 1 of EscapeToBytes
            </summary>
            <remarks>
            This variant uses a list of bytes.
            </remarks>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <param name="hexChars">The HEX characters used to write the output</param>
            <param name="allowedBytes">The bytes that don't need to be escaped</param>
            <returns>The escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlEscapeUtility.EscapeToBytes2(System.Byte[],RestSharp.Portable.UrlEscapeFlags,System.Byte[],System.Collections.Generic.ISet{System.Byte})">
            <summary>
            Variant 2 of EscapeToBytes
            </summary>
            <remarks>
            This variant uses a list of byte arrays
            </remarks>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the behavior</param>
            <param name="hexChars">The HEX characters used to write the output</param>
            <param name="allowedBytes">The bytes that don't need to be escaped</param>
            <returns>The escaped data</returns>
        </member>
        <member name="T:RestSharp.Portable.UrlUtility">
            <summary>
            URL utility functions
            </summary>
        </member>
        <member name="P:RestSharp.Portable.UrlUtility.AlphaNum">
            <summary>
            Gets all bytes that represent alpha numeric characters
            </summary>
        </member>
        <member name="P:RestSharp.Portable.UrlUtility.Unreserved">
            <summary>
            Gets all bytes that repesent both alpha numeric and unreserved characters
            </summary>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.String)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escaped</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.String,System.Text.Encoding)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.Byte[])">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.String)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.String,System.Text.Encoding)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string into a byte array</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.Byte[])">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string into a byte array</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.Escape(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape
            </summary>
            <param name="data">The data to escape</param>
            <param name="encoding">The encoding to use to convert the string into a byte array</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.EscapeToBytes(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            URL escape for bytes
            </summary>
            <param name="data">The data to escape</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.String)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.String,System.Text.Encoding)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <param name="encoding">The encoding to use to convert the string into a byte array</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.String,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.String,System.Text.Encoding,RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <param name="encoding">The encoding to use to convert the string into a byte array</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.Byte[])">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="M:RestSharp.Portable.UrlUtility.ComputeLength(System.Byte[],RestSharp.Portable.UrlEscapeFlags)">
            <summary>
            Compute length of the data after escaping its values
            </summary>
            <param name="data">The data to compute the escaped length for</param>
            <param name="flags">The flags to modify the escaping behavior</param>
            <returns>Returns the length of the escaped data</returns>
        </member>
        <member name="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator">
            <summary>
            The default HTTP Basic authenticator
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.AuthenticationMethod">
            <summary>
            The authentication method ID used in HTTP authentication challenge
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor(RestSharp.Portable.AuthHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
            <param name="authHeader">Authentication/Authorization header type</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor(System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
            <param name="credentials">The credentials to use for preauthentication</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor(System.Net.NetworkCredential,RestSharp.Portable.AuthHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
            <param name="credentials">The credentials to use for preauthentication</param>
            <param name="authHeader">Authentication/Authorization header type</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
            <param name="userName">The user name to be used for authentication</param>
            <param name="password">The password to be used for authentication</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.#ctor(System.String,System.String,RestSharp.Portable.AuthHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpBasicAuthenticator" /> class.
            </summary>
            <param name="userName">The user name to be used for authentication</param>
            <param name="password">The password to be used for authentication</param>
            <param name="authHeader">Authentication/Authorization header type</param>
        </member>
        <member name="P:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.HasAuthorizationToken">
            <summary>
            Gets a value indicating whether the authenticator already as an authorization token available for pre-authentication.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.CanPreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.CanPreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IHttpRequestMessage" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.PreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.PreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The REST client the response is assigned to</param>
            <param name="request">The REST request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpBasicAuthenticator.HandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Will be called when the authentication failed
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <param name="response">Response of the failed request</param>
            <returns>Task where the handler for a failed authentication gets executed</returns>
        </member>
        <member name="T:RestSharp.Portable.Authenticators.HttpDigestAuthenticator">
            <summary>
            HTTP Digest authenticator
            </summary>
            <remarks>
            Code was taken from <code>http://www.ifjeffcandoit.com/2013/05/16/digest-authentication-with-restsharp/</code>
            </remarks>
        </member>
        <member name="F:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.AuthenticationMethod">
            <summary>
            The authentication method ID used in HTTP authentication challenge
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpDigestAuthenticator" /> class.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.#ctor(RestSharp.Portable.AuthHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.HttpDigestAuthenticator" /> class.
            </summary>
            <param name="authHeader">Authentication/Authorization header type</param>
        </member>
        <member name="P:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.HasAuthorizationToken">
            <summary>
            Gets a value indicating whether the authenticator already as an authorization token available for pre-authentication.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.CanPreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IRestRequest" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.CanPreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.PreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.PreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The REST client the response is assigned to</param>
            <param name="request">The REST request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpDigestAuthenticator.HandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Will be called when the authentication failed
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <param name="response">Response of the failed request</param>
            <returns>Task where the handler for a failed authentication gets executed</returns>
        </member>
        <member name="T:RestSharp.Portable.Authenticators.HttpHiddenBasicAuthenticator">
            <summary>
            The HTTP Basic authenticator that works for hidden pages (status code 404).
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.HttpHiddenBasicAuthenticator.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The REST client the response is assigned to</param>
            <param name="request">The REST request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="T:RestSharp.Portable.Authenticators.SimpleAuthenticator">
            <summary>
            Simple authenticator that adds the authentication information as GetOrPost parameter
            </summary>
        </member>
        <member name="F:RestSharp.Portable.Authenticators.SimpleAuthenticator.AuthenticationMethod">
            <summary>
            The authentication method ID used to search for the credentials.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.SimpleAuthenticator" /> class.
            </summary>
            <param name="usernameKey">GetOrPost parameter name for the user name</param>
            <param name="passwordKey">GetOrPost parameter name for the password</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.#ctor(System.String,System.String,RestSharp.Portable.ParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Authenticators.SimpleAuthenticator" /> class.
            </summary>
            <param name="usernameKey">GetOrPost parameter name for the user name</param>
            <param name="passwordKey">GetOrPost parameter name for the password</param>
            <param name="parameterType">The type of the request parameter</param>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.CanPreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.CanPreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Does the authentication module supports pre-authentication for the given <see cref="T:RestSharp.Portable.IHttpRequestMessage" />?
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <returns>true when the authentication module supports pre-authentication</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.PreAuthenticate(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.PreAuthenticate(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials)">
            <summary>
            Modifies the request to ensure that the authentication requirements are met.
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <returns>The task the authentication is performed on</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.CanHandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Determines if the authentication module can handle the challenge sent with the response.
            </summary>
            <param name="client">The HTTP client the response is assigned to</param>
            <param name="request">The HTTP request the response is assigned to</param>
            <param name="credentials">The credentials to be used for the authentication</param>
            <param name="response">The response that returned the authentication challenge</param>
            <returns>true when the authenticator can handle the sent challenge</returns>
        </member>
        <member name="M:RestSharp.Portable.Authenticators.SimpleAuthenticator.HandleChallenge(RestSharp.Portable.IHttpClient,RestSharp.Portable.IHttpRequestMessage,System.Net.ICredentials,RestSharp.Portable.IHttpResponseMessage)">
            <summary>
            Will be called when the authentication failed
            </summary>
            <param name="client">Client executing this request</param>
            <param name="request">Request to authenticate</param>
            <param name="credentials">The credentials used for the authentication</param>
            <param name="response">Response of the failed request</param>
            <returns>Task where the handler for a failed authentication gets executed</returns>
        </member>
        <member name="T:RestSharp.Portable.Collections.ObservableDictionary`2">
            <summary>
            Custom implementation of an observable dictionary, because some platforms don't provide one (SL5, PCL Profile 328)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
            <param name="dictionary">A dictionary containing initial values</param>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
            <param name="comparer">A custom key comparer</param>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity of the dictionary</param>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
            <param name="dictionary">A dictionary containing initial values</param>
            <param name="comparer">A custom key comparer</param>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Collections.ObservableDictionary`2"/> class.
            </summary>
            <param name="capacity">The initial capacity of the dictionary</param>
            <param name="comparer">A custom key comparer</param>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Collections.ObservableDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Collections.ObservableDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Collections.ObservableDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Collections.ObservableDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Collections.ObservableDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="E:RestSharp.Portable.Collections.ObservableDictionary`2.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="E:RestSharp.Portable.Collections.ObservableDictionary`2.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Collections.ObservableDictionary`2.AddRange(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Adds multiple keys/values at once
            </summary>
            <param name="items">The keys/values to add</param>
        </member>
        <member name="T:RestSharp.Portable.Content.ByteArrayContent">
            <summary>
            A <see cref="T:RestSharp.Portable.IHttpContent"/> implementation for a byte array
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Content.ByteArrayContent"/> class.
            </summary>
            <param name="data">The underlying binary data</param>
        </member>
        <member name="P:RestSharp.Portable.Content.ByteArrayContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Content.ByteArrayContent.Length">
            <summary>
            Gets the content length
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Content.ByteArrayContent.Data">
            <summary>
            Gets the content
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.ByteArrayContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.true if <paramref name="length"/> is a valid length; otherwise, false.
            </returns>
            <param name="length">The length in bytes of the HTTP content.</param>
        </member>
        <member name="T:RestSharp.Portable.Content.GenericContentCollector">
            <summary>
            Collects the content elements for a generic content implementation (as used by the WebRequest implementations of RestClient)
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.GenericContentCollector.GetContent(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.RequestParameters)">
            <summary>
            Gets the content for a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">REST request to get the content for</param>
            <param name="parameters">The merged request parameters</param>
            <returns>The HTTP content to be sent</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.GenericContentCollector.GetBodyContent(RestSharp.Portable.IRestRequest,RestSharp.Portable.Parameter)">
            <summary>
            Returns the HttpContent for the body parameter
            </summary>
            <param name="request">
            The request the body parameter belongs to
            </param>
            <param name="body">
            The body parameter
            </param>
            <returns>
            The resulting HttpContent
            </returns>
        </member>
        <member name="M:RestSharp.Portable.Content.GenericContentCollector.GetBasicContent(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.RequestParameters)">
            <summary>
            Gets the basic content (without files) for a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">REST request to get the content for</param>
            <param name="parameters">The merged request parameters</param>
            <returns>The HTTP content to be sent</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.GenericContentCollector.GetMultiPartContent(RestSharp.Portable.IRestClient,RestSharp.Portable.IRestRequest,RestSharp.Portable.RequestParameters)">
            <summary>
            Gets the multi-part content (with files) for a request
            </summary>
            <param name="client">The REST client that will execute the request</param>
            <param name="request">REST request to get the content for</param>
            <param name="parameters">The merged request parameters</param>
            <returns>The HTTP content to be sent</returns>
        </member>
        <member name="T:RestSharp.Portable.Content.HttpHeaderContent">
            <summary>
            Helper class for the encapsualtion of HTTP headers for a <see cref="T:RestSharp.Portable.Content.MultipartFormDataContent"/>
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.#ctor(RestSharp.Portable.IHttpHeaders)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Content.HttpHeaderContent"/> class.
            </summary>
            <param name="headers">The encapsulated headers</param>
        </member>
        <member name="P:RestSharp.Portable.Content.HttpHeaderContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.WriteTo(RestSharp.Portable.IHttpHeaders,System.IO.Stream)">
            <summary>
            Writes the headers to the output stream
            </summary>
            <param name="headers">The HTTP headers to write</param>
            <param name="stream">The stream to write to</param>
            <returns>The task for this asynchronous operation</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.ComputeLength(RestSharp.Portable.IHttpHeaders)">
            <summary>
            Computes the length of the HTTP headers
            </summary>
            <param name="headers">The HTTP headers to compute the length for</param>
            <returns>The length of the HTTP headers</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeaderContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.true if <paramref name="length"/> is a valid length; otherwise, false.
            </returns>
            <param name="length">The length in bytes of the HTTP content.</param>
        </member>
        <member name="T:RestSharp.Portable.Content.HttpHeadersExtensions">
            <summary>
            Extension functions for easier HTTP header value handling
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeadersExtensions.ReplaceWithoutValidation(RestSharp.Portable.IHttpHeaders,System.String,System.String)">
            <summary>
            Removes the header with the given <paramref name="key"/> and adds it again without validation.
            </summary>
            <param name="headers">The header to replace the key/value for</param>
            <param name="key">The HTTP header name</param>
            <param name="value">The HTTP header value</param>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeadersExtensions.ReplaceWithoutValidation(RestSharp.Portable.IHttpHeaders,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the header with the given <paramref name="key"/> and adds it again without validation.
            </summary>
            <param name="headers">The header to replace the key/value for</param>
            <param name="key">The HTTP header name</param>
            <param name="values">The HTTP header values</param>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeadersExtensions.Replace(RestSharp.Portable.IHttpHeaders,System.String,System.String)">
            <summary>
            Removes the header with the given <paramref name="key"/> and adds it again.
            </summary>
            <param name="headers">The header to replace the key/value for</param>
            <param name="key">The HTTP header name</param>
            <param name="value">The HTTP header value</param>
        </member>
        <member name="M:RestSharp.Portable.Content.HttpHeadersExtensions.Replace(RestSharp.Portable.IHttpHeaders,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the header with the given <paramref name="key"/> and adds it again.
            </summary>
            <param name="headers">The header to replace the key/value for</param>
            <param name="key">The HTTP header name</param>
            <param name="values">The HTTP header values</param>
        </member>
        <member name="T:RestSharp.Portable.Content.MultipartFormDataContent">
            <summary>
            A <see cref="T:RestSharp.Portable.IHttpContent"/> implementation of <code>multipart/form-data</code>
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.#ctor(RestSharp.Portable.IHttpHeaders)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Content.MultipartFormDataContent"/> class.
            </summary>
            <param name="headers">The HTTP headers for this content element</param>
        </member>
        <member name="P:RestSharp.Portable.Content.MultipartFormDataContent.Boundary">
            <summary>
            Gets the boundary tag
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Content.MultipartFormDataContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Content.MultipartFormDataContent.ContentType">
            <summary>
            Gets the content type of the <code>multipart/form-data</code>
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.Add(RestSharp.Portable.IHttpContent,System.String)">
            <summary>
            Adds a content element to this <code>multipart/form-data</code>
            </summary>
            <param name="content">The content to add</param>
            <param name="name">The name of the content to add</param>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.Add(RestSharp.Portable.IHttpContent,System.String,System.String)">
            <summary>
            Adds a content element to this <code>multipart/form-data</code>
            </summary>
            <param name="content">The content to add</param>
            <param name="name">The name of the content to add</param>
            <param name="fileName">The optional file name of this content element</param>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.Dispose">
            <summary>
            Disposes the content
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.true if <paramref name="length"/> is a valid length; otherwise, false.
            </returns>
            <param name="length">The length in bytes of the HTTP content.</param>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.GetEnumerator">
            <summary>
            Returns the enumeration of sub-contents
            </summary>
            <returns>the enumeration of sub-contents</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.MultipartFormDataContent.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumeration of sub-contents
            </summary>
            <returns>the enumeration of sub-contents</returns>
        </member>
        <member name="T:RestSharp.Portable.Content.NonDisposableStream">
            <summary>
            A stream that encapsulates another and avoids calling the <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Content.NonDisposableStream"/> class.
            </summary>
            <param name="baseStream">The underlying stream</param>
        </member>
        <member name="P:RestSharp.Portable.Content.NonDisposableStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Content.NonDisposableStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Content.NonDisposableStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Content.NonDisposableStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:RestSharp.Portable.Content.NonDisposableStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.NonDisposableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:RestSharp.Portable.Content.StringContent">
            <summary>
            A <see cref="T:RestSharp.Portable.IHttpContent"/> implementation for a string.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Content.StringContent"/> class.
            </summary>
            <param name="value">The value of this HTTP content element</param>
            <param name="encoding">The encoding when the data has to be serializes into bytes</param>
        </member>
        <member name="P:RestSharp.Portable.Content.StringContent.Headers">
            <summary>
            Gets the HTTP headers for the content.
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.CopyToAsync(System.IO.Stream)">
            <summary>
            Asynchronously copy the data to the given stream.
            </summary>
            <param name="stream">The stream to copy to</param>
            <returns>The task that copies the data to the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.LoadIntoBufferAsync(System.Int64)">
            <summary>
            Gets the raw content as byte array.
            </summary>
            <param name="maxBufferSize">The maximum buffer size</param>
            <returns>The task that loads the data into an internal buffer</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.ReadAsStreamAsync">
            <summary>
            Returns the data as a stream
            </summary>
            <returns>The task that returns the stream</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.ReadAsByteArrayAsync">
            <summary>
            Returns the data as byte array
            </summary>
            <returns>The task that returns the data as byte array</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.ReadAsStringAsync">
            <summary>
            Returns the data as string
            </summary>
            <returns>The task that returns the data as string</returns>
        </member>
        <member name="M:RestSharp.Portable.Content.StringContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.true if <paramref name="length"/> is a valid length; otherwise, false.
            </returns>
            <param name="length">The length in bytes of the HTTP content.</param>
        </member>
        <member name="T:RestSharp.Portable.Deserializers.JsonDeserializer">
            <summary>
            The default JSON deserializer using Json.Net
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Deserializers.JsonDeserializer.Deserialize``1(RestSharp.Portable.IRestResponse)">
            <summary>
            Deserialize the response
            </summary>
            <typeparam name="T">Object type to deserialize the result to</typeparam>
            <param name="response">The response to deserialize the result from</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.Deserializers.JsonDeserializer.ConfigureSerializer(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Configure the JsonSerializer
            </summary>
            <param name="serializer">The serializer to configure</param>
        </member>
        <member name="T:RestSharp.Portable.Deserializers.XmlDataContractDeserializer">
            <summary>
            Deserializes a XML using the DataContractSerializer
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Deserializers.XmlDataContractDeserializer.Deserialize``1(RestSharp.Portable.IRestResponse)">
            <summary>
            Deserialize the response
            </summary>
            <typeparam name="T">Object type to deserialize the result to</typeparam>
            <param name="response">The response to deserialize the result from</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:RestSharp.Portable.Deserializers.XmlDataContractDeserializer.CreateSerializer(System.Type)">
            <summary>
            Create a new data contract serializer
            </summary>
            <remarks>Override this method when you want a custom data contract serializer configuration.</remarks>
            <param name="t">The type to create the serializer for</param>
            <returns>A new data contract serializer.</returns>
        </member>
        <member name="T:RestSharp.Portable.Impl.GenericHttpHeaders">
            <summary>
            A default implementation of the HTTP header collection
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.GetEnumerator">
            <summary>
            Gets the enumerator for all HTTP headers
            </summary>
            <returns>The enumerator for all HTTP headers</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header values
            </summary>
            <param name="name">The header to add the values for</param>
            <param name="values">The values to add</param>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.Add(System.String,System.String)">
            <summary>
            Add a header value
            </summary>
            <param name="name">The header to add the value for</param>
            <param name="value">The value to add</param>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.Clear">
            <summary>
            Remove all headers
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.Contains(System.String)">
            <summary>
            Is there a value for a header?
            </summary>
            <param name="name">The name of the header</param>
            <returns>true, if there is at least one value for the header</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.GetValues(System.String)">
            <summary>
            Returns all values for a given header
            </summary>
            <remarks>
            Throws an exception if the header doesn't exist.
            </remarks>
            <param name="name">The header name</param>
            <returns>The sequence of header values</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.Remove(System.String)">
            <summary>
            Remove the header with the given name
            </summary>
            <param name="name">The header name</param>
            <returns>true, if the header could be removed</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Try to get the values
            </summary>
            <param name="name">The header name</param>
            <param name="values">The values of the header to return</param>
            <returns>true, if the HTTP header was found</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Try to add header values without validation
            </summary>
            <param name="name">The header name</param>
            <param name="values">The values to add</param>
            <returns>true, if the HTTP header values could be added</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.TryAddWithoutValidation(System.String,System.String)">
            <summary>
            Try to add a header value without validation
            </summary>
            <param name="name">The header name</param>
            <param name="value">The value to add</param>
            <returns>true, if the HTTP header value could be added</returns>
        </member>
        <member name="M:RestSharp.Portable.Impl.GenericHttpHeaders.ToString">
            <summary>
            Returns a text representation of all HTTP headers in this collection
            </summary>
            <returns>The text representation of all HTTP headers</returns>
        </member>
        <member name="T:RestSharp.Portable.Serializers.JsonSerializer">
            <summary>
            The default JSON serializer using Json.Net
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Serializers.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Serializers.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Serializers.JsonSerializer.ContentType">
            <summary>
            Gets or sets the content type produced by the serializer
            </summary>
            <remarks>
            This serializer will return application/json
            </remarks>
        </member>
        <member name="M:RestSharp.Portable.Serializers.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize the object into a byte array
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>Byte array to send in the request body</returns>
        </member>
        <member name="M:RestSharp.Portable.Serializers.JsonSerializer.ConfigureSerializer(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Configure the <see cref="T:RestSharp.Portable.Serializers.JsonSerializer"/>
            </summary>
            <param name="serializer">The serializer to configure</param>
        </member>
        <member name="T:RestSharp.Portable.Serializers.XmlDataContractSerializer">
            <summary>
            Serializes an object using the DataContractSerializer
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Serializers.XmlDataContractSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestSharp.Portable.Serializers.XmlDataContractSerializer" /> class.
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Serializers.XmlDataContractSerializer.ContentType">
            <summary>
            Gets or sets the content type produced by the serializer
            </summary>
            <remarks>
            As long as there is no manually set content type, the content type character set will always reflect the encoding
            of the XmlWriterSettings.
            </remarks>
        </member>
        <member name="P:RestSharp.Portable.Serializers.XmlDataContractSerializer.Default">
            <summary>
            Gets the default XML serializer for AddXmlBody
            </summary>
        </member>
        <member name="P:RestSharp.Portable.Serializers.XmlDataContractSerializer.XmlWriterSettings">
            <summary>
            Gets or sets the configuration used to create an XML writer
            </summary>
        </member>
        <member name="M:RestSharp.Portable.Serializers.XmlDataContractSerializer.Serialize(System.Object)">
            <summary>
            Serialize the object into a byte array
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>Byte array to send in the request body</returns>
        </member>
        <member name="M:RestSharp.Portable.Serializers.XmlDataContractSerializer.CreateSerializer(System.Object)">
            <summary>
            Create a new data contract serializer
            </summary>
            <param name="obj">The object to create the serializer for</param>
            <returns>A new instance of the serializer for the given instance.</returns>
        </member>
    </members>
</doc>
