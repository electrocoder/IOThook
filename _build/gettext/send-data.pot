# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, electrocoder
# This file is distributed under the same license as the iothook package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: iothook 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-29 01:18+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../send-data.rst:3
msgid "Send Data"
msgstr ""

#: ../../send-data.rst:6
msgid "HTTP Send Data"
msgstr ""

#: ../../send-data.rst:8
#: ../../send-data.rst:254
msgid "To send data, you must first add a device. Special read and write \"API KEY\" when the device is created Data processing is performed according to the access method (POST, GET, POST/GET) that is generated and determined."
msgstr ""

#: ../../send-data.rst:11
#: ../../send-data.rst:257
msgid "For example; Let our device be in a structure that receives humidity, heat and light values. For this example, the device named \"# 650 - iot_examples\" was created on iothook.com. `IoThook <https://iothook.com/en/device/settings/650/>`_ ."
msgstr ""

#: ../../send-data.rst:15
#: ../../send-data.rst:261
msgid "Let the IoT device read the data from the sensors and send this data to us once every 15 seconds, a total of 100 times."
msgstr ""

#: ../../send-data.rst:17
#: ../../send-data.rst:263
msgid "You can access the read and write API Keys created for the #650 iot device from the IoThook dashboard."
msgstr ""

#: ../../send-data.rst:19
msgid "The API ENDPOINT address we will use to send data to IoThook servers with Python is *https://iothook.com/api/update/*. Writing *api_key* information is needed to send data. You can access this KEY from the device **settings** page."
msgstr ""

#: ../../send-data.rst:22
msgid "There are 2 required fields to send data. These fields are **api_key** and **field_1** fields. APIKEY your device ownership *field_1* absolutely must be because it validates and must have at least one data field. Other fields defined even if they are not sent, they are recorded as **None**."
msgstr ""

#: ../../send-data.rst:27
msgid "Send JSON Data in POST with Python"
msgstr ""

#: ../../send-data.rst:29
msgid "In this example, JSON data is sent to the device channel named \"# 650 - iot_examples\" using the HTTP POST method with Python. When the data is sent successfully, Json REST output of the data is received. You can do this with the *response.json()* method, we are doing."
msgstr ""

#: ../../send-data.rst:33
msgid "Example output:"
msgstr ""

#: ../../send-data.rst:38
msgid "Send JSON Data in POST with Python Examples:"
msgstr ""

#: ../../send-data.rst:40
msgid "You can find this example and others at `IoT Examples Github <https://github.com/electrocoder/IOThook/blob/master/examples/http/python/iot_post_json_update_post.py>`_."
msgstr ""

#: ../../send-data.rst:None
#: ../../send-data.rst:None
#: ../../send-data.rst:None
#: ../../send-data.rst:None
#: ../../send-data.rst:None
msgid "python-send-data.png"
msgstr ""

#: ../../send-data.rst:112
msgid "Send JSON Data in POST with Python Examples 2:"
msgstr ""

#: ../../send-data.rst:114
msgid "You can find this example and others at `IoT Examples Json Post 1 Github <https://github.com/meseiot/iot-examples/blob/master/http/python/iot_post_json_update_post_1.py>`_."
msgstr ""

#: ../../send-data.rst:186
msgid "Send JSON Data in POST with Python Examples 3:"
msgstr ""

#: ../../send-data.rst:188
msgid "You can find this example and others at `IoT Examples Json Update 2 Github <https://github.com/meseiot/iot-examples/blob/master/http/python/iot_post_json_update_post_2.py>`_."
msgstr ""

#: ../../send-data.rst:250
msgid "Send Data in GET with Python"
msgstr ""

#: ../../send-data.rst:252
msgid "With the IoThook Api v6 update, it allows sending data with the GET method."
msgstr ""

#: ../../send-data.rst:265
msgid "The API ENDPOINT address we will use to send data to IoThook servers with Python is https://iothook.com/api/update/. Writing api_key information is needed to send data. You can access this KEY from the device settings page."
msgstr ""

#: ../../send-data.rst:268
msgid "There are 2 required fields to send data. These fields are api_key and field_1 fields. APIKEY your device ownership field_1 absolutely must be because it validates and must have at least one data field. Other fields defined even if they are not sent, they are recorded as None."
msgstr ""

#: ../../send-data.rst:273
msgid "Send Data in GET with Python Examples:"
msgstr ""

#: ../../send-data.rst:275
msgid "You can find this example and others at `IoT Examples Get Write Github <https://github.com/meseiot/iot-examples/blob/master/http/python/iot_get_write.py>`_."
msgstr ""

#: ../../send-data.rst:332
msgid "Send Data in GET with Python Examples 2:"
msgstr ""

#: ../../send-data.rst:334
msgid "You can find this example and others at `IoT Examples Get Write 1 Github <https://raw.githubusercontent.com/meseiot/iot-examples/master/http/python/iot_get_write_1.py>`_."
msgstr ""

#: ../../send-data.rst:396
msgid "Arduino and ESP8266"
msgstr ""

#: ../../send-data.rst:399
msgid "Arduino and ESP8266 HTTP POST Send Data"
msgstr ""

#: ../../send-data.rst:401
#: ../../send-data.rst:587
msgid "In this example, Arduino code is given for sending data to iothook with ESP8266 connected to Arduino Uno with RX and TX. In the example, random numbers between 0-100 were generated and the device was sent to the device with \"# 650 - iot_examples\" on iothook."
msgstr ""

#: ../../send-data.rst:405
msgid "You can find this example and others at `IoT Examples ESP8266 Post Github <https://github.com/meseiot/iot-examples/blob/master/http/arduino/esp8266/arduino_esp8266_post_send_data.ino>`_."
msgstr ""

#: ../../send-data.rst:585
msgid "Arduino and ESP8266 HTTP POST Send Data 2"
msgstr ""

#: ../../send-data.rst:591
msgid "You can find this example and others at `IoT Examples ESP8266 Post Send Github <https://github.com/meseiot/iot-examples/blob/master/http/arduino/esp8266/arduino_esp8266_post_send_data.ino>`_."
msgstr ""

#: ../../send-data.rst:775
msgid "Arduino, ESP8266, Nodemcu GET Metodu ile Veri Gönderme"
msgstr ""

#: ../../send-data.rst:777
#: ../../send-data.rst:970
#: ../../send-data.rst:1015
#: ../../send-data.rst:1059
#: ../../send-data.rst:1105
#: ../../send-data.rst:1137
#: ../../send-data.rst:1159
msgid "IOThook Api v1.4 güncellemesi ile GET metodu ile veri göndermeye izin vermektedir."
msgstr ""

#: ../../send-data.rst:779
#: ../../send-data.rst:972
#: ../../send-data.rst:1017
#: ../../send-data.rst:1061
#: ../../send-data.rst:1107
#: ../../send-data.rst:1139
#: ../../send-data.rst:1161
msgid "Bu örneğe ve diğerlerine `IOTHOOK Git <https://github.com/electrocoder/IoThook>`_ sayfasından ulaşabilirsiniz."
msgstr ""

#: ../../send-data.rst:781
msgid "Bu örnekde Arduino, ESP8266 ve NodeMCU ile ile Get metodu kullanarak veri gönderme örneği verilmiştir:"
msgstr ""

#: ../../send-data.rst:968
msgid "GO GET Metodu ile Veri Gönderme"
msgstr ""

#: ../../send-data.rst:974
msgid "Bu örnekde GO dili ile ile Get metodu kullanarak veri gönderme örneği verilmiştir:"
msgstr ""

#: ../../send-data.rst:1013
msgid "PHP GET Metodu ile Veri Gönderme"
msgstr ""

#: ../../send-data.rst:1019
msgid "Bu örnekde PHP dili ile ile Get metodu kullanarak veri gönderme örneği verilmiştir:"
msgstr ""

#: ../../send-data.rst:1057
msgid "NodeJS GET Metodu ile Veri Gönderme"
msgstr ""

#: ../../send-data.rst:1063
#: ../../send-data.rst:1109
#: ../../send-data.rst:1141
#: ../../send-data.rst:1163
msgid "Bu örnekde NodeJS Native metodu kullanarak veri gönderme örneği verilmiştir:"
msgstr ""

#: ../../send-data.rst:1103
msgid "Javascript Jquery Ajax GET Metodu ile Veri Gönderme"
msgstr ""

#: ../../send-data.rst:1135
#: ../../send-data.rst:1157
msgid "Java Unirest GET Metodu ile Veri Gönderme"
msgstr ""
